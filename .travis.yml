language: go
go:
  - 1.3

before_install: |
  # install test dependencies
  sudo apt-get install httperf

  # install fig
  sudo curl -L https://github.com/docker/fig/releases/download/0.5.2/linux > /usr/local/bin/fig
  sudo chmod +x /usr/local/bin/fig

  # setup domains
  sudo echo "127.0.0.1 myexample.com user.myexample.com" >> /etc/hosts

  # needed for the UML container
  sudo apt-get install -qq -y slirp aufs-tools cgroup-lite

  # prepare docker dir for aufs mount
  sudo mkdir -p /var/lib/docker

  # download usermode linux kernel for docker
  curl -sLo linux https://github.com/jpetazzo/sekexe/raw/master/uml
  chmod +x linux

  # download docker
  curl -sLo docker \
    https://get.docker.io/builds/Linux/x86_64/docker-1.0.0
  chmod +x docker


  # ---------------------------------------------------------------------------


  # create tests.sh script
  cat > tests.sh <<'BASH'
  #!/bin/bash

  # go back to where we were invoked
  cd $WORKDIR

  save_and_shutdown() {
    # save built for host result
    echo $? > /tmp/build.status
    # force clean shutdown
    halt -f
  }

  # make sure we shut down cleanly
  trap save_and_shutdown EXIT

  # configure path to include /usr/local
  export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

  # can't do much without proc!
  mount -t proc none /proc

  # pseudo-terminal devices
  mkdir -p /dev/pts
  mount -t devpts none /dev/pts

  # shared memory a good idea
  mkdir -p /dev/shm
  mount -t tmpfs none /dev/shm

  # sysfs a good idea
  mount -t sysfs none /sys

  # pidfiles and such like
  mkdir -p /var/run
  mount -t tmpfs none /var/run

  # takes the pain out of cgroups
  cgroups-mount

  # mount /var/lib/docker with a tmpfs
  mount -t tmpfs none /var/lib/docker

  # enable ipv4 forwarding for docker
  echo 1 > /proc/sys/net/ipv4/ip_forward

  # configure networking
  ip addr add 127.0.0.1 dev lo
  ip link set lo up
  ip addr add 10.1.1.1/24 dev eth0
  ip link set eth0 up
  ip route add default via 10.1.1.254

  # configure dns (google public)
  mkdir -p /run/resolvconf
  echo 'nameserver 8.8.8.8' > /run/resolvconf/resolv.conf
  mount --bind /run/resolvconf/resolv.conf /etc/resolv.conf

  # start docker backgrounded
  ((./docker -d >/dev/null 2>&1 &) &)
  sleep 5

  # run the build
  /usr/local/bin/fig up
  make test

  BASH

  chmod +x tests.sh


  # ---------------------------------------------------------------------------


  # create run.sh script
  cat > run.sh <<'BASH'
  #!/bin/bash

  # assume failure
  echo 1 > /tmp/build.status

  # run the build inside UML kernel
  ./linux quiet mem=2G rootfstype=hostfs rw \
    eth0=slirp,,/usr/bin/slirp-fullbolt \
    init=$(pwd)/tests.sh WORKDIR=$(pwd) HOME=$HOME

  # grab the build result and use it
  exit $(cat /tmp/build.status)
  BASH

  chmod +x run.sh

script: ./run.sh
